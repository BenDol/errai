<?xml version="1.0" encoding="UTF-8"?>
<chapter id="sid-5931334">
   <title>Configuration</title>
   <para>This section contains information on configuring Errai.</para>
   <section id="sid-5931354">
      <title>ErraiApp.properties</title>
      <para>ErraiApp.properties acts both as a marker file for JARs that contain Errai-enabled GWT modules, and as a place to put configuration settings for those modules in the rare case that non-default configuration is necessary.</para>
      <section id="sid-5931354_ErraiApp.properties-AsaMarkerFile">
         <title>As a Marker File</title>
         <para>
            <emphasis role="strong">An</emphasis>
            <code>ErraiApp.properties</code>
            <emphasis role="strong">file must appear at the root of each classpath location that contains an Errai module.</emphasis>
          The contents of JAR and directory classpath entries that do not contain an
          <code>ErraiApp.properties</code>
          are effectively invisible to Errai's classpath scanner.
        </para>
      </section>
      <section id="sid-5931354_ErraiApp.properties-AsaConfigurationFile">
         <title>As a Configuration File</title>
         <para>
          ErraiApp.properties is usually left empty, but it can contain configuration settings for both the core of Errai and any of its extensions. Configuration properties defined and used by Errai components have keys that start with "
          <code>errai.</code>
          ". Third party extensions should each choose their own prefix for keys in ErraiApp.properties.
        </para>
         <section id="sid-5931354_ErraiApp.properties-ConfigurationMerging">
            <title>Configuration Merging</title>
            <para>In a non-trivial application, there will be several instances of ErraiApp.properties on the classpath (one per JAR file that contains Errai modules, beans, or portable classes).</para>
            <para>Before using the configuration information from ErraiApp.properties, Errai reads the contents of every ErraiApp.properties on the classpath. The configuration information in all these files is merged together to form one set of key=value pairs.</para>
            <para>If the same key appears in more than one ErraiApp.properties file, only one of the values will be associated with that key. The other values will be ignored. In future versions of Errai, this condition may be made into an error. It's best to avoid specifying the same configuration key in multiple ErraiApp.properties files.</para>
         </section>
         <section id="sid-5931354_ErraiApp.properties-ErraiMarshallingConfiguration">
            <title>Errai Marshalling Configuration</title>
            <itemizedlist>
               <listitem>
                  <para>
                     <emphasis role="strong">errai.marshalling.use_static_marshallers</emphasis>
                when set to
                <code>false</code>
                , Errai will not use the precompiled server-side marshallers even if the generated
                <code>ServerMarshallingFactoryImpl</code>
                class is found on the classpath. This is useful when using Dev Mode in conjunction with an external server such as JBoss AS 7 or EAP 6.
              </para>
               </listitem>
               <listitem>
                  <para>
                     <emphasis role="strong">errai.marshalling.force_static_marshallers</emphasis>
                when set to
                <code>true</code>
                , Errai will not use dynamic marshallers. If the generated
                <code>ServerMarshallingFactoryImpl</code>
                cannot be loaded (possibly after an attempt to generate it on-the-fly), the Errai web app will fail to start.
              </para>
               </listitem>
            </itemizedlist>
            <para>
            Errai also supports configuring portable types in
            <code>ErraiApp.properties</code>
            as an alternative to the
            <code>@Portable</code>
            annotation. See
            <link linkend="sid-5931328_Marshalling-ManualMapping">the Errai Marshalling section on Manual Mapping</link>
            for details.
          </para>
         </section>
         <section id="sid-5931354_ErraiApp.properties-ErraiIoCConfiguration">
            <title>Errai IoC Configuration</title>
            <itemizedlist>
               <listitem>
                  <para>
                     <emphasis role="strong">errai.ioc.QualifyingMetaDataFactory</emphasis>
                specifies the fully-qualified class name of the QualifyingMetadataFactory implementation to use with Errai IoC.
              </para>
               </listitem>
            </itemizedlist>
            <itemizedlist>
               <listitem>
                  <para>
                     <emphasis role="strong">errai.ioc.enabled.alternatives</emphasis>
                specifies a whitespace-separated list of fully-qualified class names for
                <emphasis role="italics">alternative beans</emphasis>
                . See
                <xref linkend="sid-22872133"/>
                for details.
              </para>
               </listitem>
            </itemizedlist>
         </section>
      </section>
      <section id="sid-5931354_ErraiApp.properties-">
         <title/>
      </section>
   </section>
   <section id="sid-5931338">
      <title>Messaging (Errai Bus) Configuration</title>
      <section id="sid-5931338_Messaging%28ErraiBus%29Configuration-Disablingremotecommunication">
         <title>Disabling remote communication</title>
         <para>In some cases it might be desirable to prevent the client bus from communicating with the server. One use case for this is when all communication with the server is handled using JAX-RS and the constant long polling requests for message exchange are not needed.</para>
         <para>To turn off remote communication in the client bus the following JavaScript variable can be set in the HTML host page:</para>
         <informalexample>
            <programlisting language="xml">
&lt;script type="text/javascript"&gt;
  erraiBusRemoteCommunicationEnabled = false;
&lt;/script&gt;
</programlisting>
         </informalexample>
      </section>
      <section id="sid-5931338_Messaging%28ErraiBus%29Configuration-Configuringanalternativeremoteremotebusendpoint">
         <title>Configuring an alternative remote remote bus endpoint</title>
         <para>By default the remote bus is expected at the GWT web application's context path. In case the remote bus is part of a different web application or deployed on a different server, the following configuration can be used in the HTML host page to configure the remote bus endpoint used on the client.</para>
         <informalexample>
            <programlisting language="xml">
&lt;script type="text/javascript"&gt;
  erraiBusApplicationRoot = "/MyRemoteMessageBusEnpoint";
&lt;/script&gt;
</programlisting>
         </informalexample>
      </section>
      <section id="sid-5931338_Messaging%28ErraiBus%29Configuration-ErraiService.properties">
         <title>ErraiService.properties</title>
         <para>The ErraiService.properties file contains basic configuration for the bus itself. Unlike ErraiApp.properties, there should be at most one ErraiService.properties file on the classpath of a deployed application. If you do not need to set any properties to their non-default values, this file can be omitted from the deployment entirely.</para>
         <section id="sid-5931338_Messaging%28ErraiBus%29Configuration-MessageDispatching">
            <title>Message Dispatching</title>
            <para>Dispatchers encapsulate the strategy for taking messages that need to be delivered somewhere and seeing that they are delivered to where they need to go. There are two primary implementations that are provided with Errai, depending on your needs.</para>
            <section id="sid-5931338_Messaging%28ErraiBus%29Configuration-SimpleDispatcher">
               <title>SimpleDispatcher</title>
               <para>SimpleDispatcher is basic implementation that provides no asychronous delivery mechanism. Rather, when you configure the Errai to use this implementation, messages are delivered to their endpoints synchronously. The incoming HTTP thread will be held open until the messages are delivered.</para>
               <para>While this sounds like it has almost no advantages, especially in terms of scalablity. Using the SimpleDispatcher can be far preferable when you're developing your application, as any errors and stack traces will be far more easily traced and some cloud services may not permit the use of threads in any case.</para>
            </section>
            <section id="sid-5931338_Messaging%28ErraiBus%29Configuration-AsyncDispatcher">
               <title>AsyncDispatcher</title>
               <para>The AsyncDispatcher provides full asynchronous delivery of messages. When this dispatcher is used, HTTP threads will have control immediately returned upon dispatch of the message. This dispatcher provides far more efficient use of resources in high-load applications, and will significantly decrease memory and thread usage overall.</para>
               <itemizedlist>
                  <listitem>
                     <para>
                        <emphasis role="strong">errai.dispatcher.implementation</emphasis>
                  specifies the dispatcher implementation to be used by the bus. There are two implementations which come with Errai out of the box: the
                  <code>SimpleDispatcher</code>
                  and the
                  <code>AsyncDispatcher</code>
                  . See ERRAI:Dispatcher Implementations for more information about the differences between the two.
                </para>
                  </listitem>
               </itemizedlist>
            </section>
         </section>
         <section id="sid-5931338_Messaging%28ErraiBus%29Configuration-Threading">
            <title>Threading</title>
            <itemizedlist>
               <listitem>
                  <para>
                     <emphasis role="strong">errai.async_thread_pool_size</emphasis>
                specifies the total number of worker threads in the worker pool for handling and delivering messages. Adjusting this value does not have any effect if you are using the SimpleDispatcher.
              </para>
               </listitem>
            </itemizedlist>
            <itemizedlist>
               <listitem>
                  <para>
                     <emphasis role="strong">errai.async.worker_timeout</emphasis>
                specifies the total amount of time (in seconds) that a service is given to finish processing an incoming message before the pool interrupts the thread and returns an error. Adjusting this value has no effect if you are using the SimpleDispatcher.
              </para>
               </listitem>
            </itemizedlist>
         </section>
         <section id="sid-5931338_Messaging%28ErraiBus%29Configuration-Buffering">
            <title>Buffering</title>
            <itemizedlist>
               <listitem>
                  <para>
                     <emphasis role="strong">errai.bus.buffer_size</emphasis>
                The total size of the transmission buffer, in megabytes. If this attribute is specified along with
                <code>errai.bus.buffer_segment_count</code>
                , then the segment count is inferred by the calculation
                <code>buffer_segment_count / buffer_size}. If {{errai.bus.buffer_segment_count</code>
                is also defined, it will be ignored in the presence of this property. Default value: 32.
              </para>
               </listitem>
            </itemizedlist>
            <itemizedlist>
               <listitem>
                  <para>
                     <emphasis role="strong">errai.bus.buffer_segment_size</emphasis>
                The transmission buffer segment size in bytes. This is the minimum amount of memory each message will consume while stored within the buffer. Defualt value: 8.
              </para>
               </listitem>
            </itemizedlist>
            <itemizedlist>
               <listitem>
                  <para>
                     <emphasis role="strong">errai.bus.buffer_segment_count</emphasis>
                The number of segments in absolute terms. If this attribute is specified in the absence of
                <code>errai.bus.buffer_size</code>
                , the buffer size is inferred by the calculation
                <code>buffer_segment_size / buffer_segment_count</code>
                .
              </para>
               </listitem>
            </itemizedlist>
            <itemizedlist>
               <listitem>
                  <para>
                     <emphasis role="strong">errai.bus.buffer_allocation_mode</emphasis>
                Buffer allocation mode. Allowed values are
                <code>direct</code>
                and
                <code>heap</code>
                . Direct allocation puts buffer memory outside of the JVM heap, while heap allocation uses buffer memory inside the Java heap. For most situations, heap allocation is preferable. However, if the application is data intensive and requires a substantially large buffer, it is preferable to use a direct buffer. From a throughput perspective, current JVM implementations pay about a 20% performance penalty for direct-allocated memory access. However, your application may show better scaling characteristics with direct buffers. Benchmarking under real load conditions is the only way to know the optimal setting for your use case and expected load. Default value:
                <code>direct</code>
                .
              </para>
               </listitem>
            </itemizedlist>
         </section>
         <section id="sid-5931338_Messaging%28ErraiBus%29Configuration-Security">
            <title>Security</title>
            <itemizedlist>
               <listitem>
                  <para>
                     <emphasis role="strong">errai.authentication_adapter</emphasis>
                specifies the authentication modelAdapter the bus should use for determining whether calls should be serviced based on authentication and security principals.
              </para>
               </listitem>
            </itemizedlist>
            <itemizedlist>
               <listitem>
                  <para>
                     <emphasis role="strong">errai.require_authentication_for_all</emphasis>
                indicates whether or not the bus should always require the use of authentication for all requests inbound for the bus. If this is turned on, an authentication model adapter must be defined, and any user must be authenticated before the bus will deliver any messages from the client to any service.
              </para>
               </listitem>
            </itemizedlist>
         </section>
         <section id="sid-5931338_Messaging%28ErraiBus%29Configuration-Clustering">
            <title>Clustering</title>
            <itemizedlist>
               <listitem>
                  <para>
                     <emphasis role="strong">errai.bus.enable_clustering</emphasis>
                A boolean indicating whether or not Errai's server side bus should attempt to orchestrate with its peers. The orchestration mechanism is dependent on the configured clustering provider (e.g. UDP based multicast discovery in case of the default JGroups provider). The default value is
                <code>false</code>
                .
              </para>
               </listitem>
            </itemizedlist>
            <itemizedlist>
               <listitem>
                  <para>
                     <emphasis role="strong">errai.bus.clustering_provider</emphasis>
                The fully qualified class name of the clustering provider implementation. A class that implements
                <code>org.jboss.errai.bus.server.cluster.ClusteringProvider</code>
                . Currently the only build-in provider is the
                <code>org.jboss.errai.bus.server.cluster.jgroups.JGroupsClusteringProvider</code>
                .
              </para>
               </listitem>
            </itemizedlist>
         </section>
         <section id="sid-5931338_Messaging%28ErraiBus%29Configuration-StartupConfiguration">
            <title>Startup Configuration</title>
            <itemizedlist>
               <listitem>
                  <para>
                     <emphasis role="strong">errai.auto_discover_services</emphasis>
                A boolean indicating whether or not the Errai bootstrapper should automatically scan for services.
                <emphasis role="strong">
                  This property must be set to
                  <code>true</code>
                  if and only if Errai CDI is not on the classpath
                </emphasis>
                . The default value is
                <code>false</code>
                .
              </para>
               </listitem>
            </itemizedlist>
            <itemizedlist>
               <listitem>
                  <para>
                     <emphasis role="strong">errai.auto_load_extensions</emphasis>
                A boolean indicating whether or not the Errai bootstrapper should automatically scan for extensions. The default value is
                <code>true</code>
                .
              </para>
               </listitem>
            </itemizedlist>
         </section>
         <section id="sid-5931338_Messaging%28ErraiBus%29Configuration-ExampleConfiguration">
            <title>Example Configuration</title>
            <informalexample>
               <programlisting language="ini">
##
## Request dispatcher implementation (default is SimpleDispatcher)
##
#errai.dispatcher_implementation=org.jboss.errai.bus.server.SimpleDispatcher
errai.dispatcher_implementation=org.jboss.errai.bus.server.AsyncDispatcher

#
## Worker pool size. This is the number of threads the asynchronous worker pool should provide for
processing
## incoming messages. This option is only valid when using the AsyncDispatcher implementation.
##
errai.async.thread_pool_size=5

##
## Worker timeout (in seconds). This defines the time that a single asychronous process may run,
before the worker pool
## terminates it and reclaims the thread. This option is only valid when using the AsyncDispatcher
implementation.
##
errai.async.worker.timeout=5

##
## Specify the Authentication/Authorization Adapter to use
##
#errai.authentication_adapter=org.jboss.errai.persistence.server.security.HibernateAuthenticationAdapter
#errai.authentication_adapter=org.jboss.errai.bus.server.security.auth.JAASAdapter

##
## This property indicates whether or not authentication is required for all communication with the
bus. Set this
## to 'true' if all access to your application should be secure.
##
#errai.require_authentication_for_all=true
</programlisting>
            </informalexample>
         </section>
      </section>
      <section id="sid-5931338_Messaging%28ErraiBus%29Configuration-ServletConfiguration">
         <title>Servlet Configuration</title>
         <para>Errai has several different implementations for HTTP traffic to and from the bus. We provide a universally-compatible blocking implementation that provides fully synchronous communication to/from the server-side bus. Where this introduces scalability problems, we have implemented many webserver-specific implementations that take advantage of the various proprietary APIs to provide true asynchrony.</para>
         <para>
          These included implementations are packaged at:
          <code>org.jboss.errai.bus.server.servlet</code>
          .
        </para>
         <important>
            <title>One is Enough!</title>
            <para>You should use just one of the options below. Configuring multiple ErraiServlet implementations in the same application will lead to unpredictable behaviour!</para>
            <para>Remember that all Errai demos and archetypes are preconfigured with DefaultBlockingServlet as a servlet. You will need to remove this default setup if you choose to use a different ErraiServlet implementation in your app.</para>
         </important>
         <note>
            <title>Rolling your own security? Beware!</title>
            <para>
            All of the following examples use a wildcard mapping for
            <code>*.erraiBus</code>
            with no path prefix. This allows Errai Bus to communicate from any point in your application's URI hierarchy, which allows bus communication to work properly no matter where you choose to put your GWT host page.
          </para>
            <para>For example, all of the following are equivalent from Errai's point of view:</para>
            <itemizedlist>
               <listitem>
                  <para>/in.erraiBus</para>
               </listitem>
               <listitem>
                  <para>/foo/bar/in.erraiBus</para>
               </listitem>
               <listitem>
                  <para>/long/path/to/get/to.erraiBus</para>
               </listitem>
            </itemizedlist>
            <para>
            If you rely on your own security rules or a custom security filter to control access to Errai Bus (rather than the security framework within Errai Bus,) ensure you use the same mapping pattern for that
            <code>filter-mapping</code>
            or
            <code>security-constraint</code>
            as you do for the Errai Servlet itself.
          </para>
         </note>
         <section id="sid-5931338_Messaging%28ErraiBus%29Configuration-DefaultBlockingServlet">
            <title>DefaultBlockingServlet</title>
            <para>This ErraiServlet implementation should work in virtually any servlet container that supports Java Servlets 2.0 or higher. It provides purely synchronous request handling. The one scenario where this servlet will not work is in servers that put restrictions on putting threads into sleep states.</para>
            <para>The default DefaultBlockingServlet which provides the HTTP-protocol gateway between the server bus and the client buses.</para>
            <para>
            As its name suggests, DefaultBlockingServlet is normally configured as an HTTP Servlet in the
            <code>web.xml</code>
            file:
          </para>
            <informalexample>
               <programlisting language="xml">
&lt;servlet&gt;
  &lt;servlet-name&gt;ErraiServlet&lt;/servlet-name&gt;
  &lt;servlet-class&gt;org.jboss.errai.bus.server.servlet.DefaultBlockingServlet&lt;/servlet-class&gt;
  &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;
&lt;/servlet&gt;
                                                                                                     
&lt;servlet-mapping&gt;
  &lt;servlet-name&gt;ErraiServlet&lt;/servlet-name&gt;
  &lt;url-pattern&gt;*.erraiBus&lt;/url-pattern&gt;
&lt;/servlet-mapping&gt;
</programlisting>
            </informalexample>
         </section>
         <section id="sid-5931338_Messaging%28ErraiBus%29Configuration-DefaultBlockingServletconfiguredasFilter">
            <title>DefaultBlockingServlet configured as Filter</title>
            <para>
            Alternatively, the DefaultBlockingServlet can be deployed as a Servlet Filter. This may be necessary in cases where an existing filter is configured in the web application, and that filter interferes with the Errai Bus
            
            requests. In this case, configuring DefaultBlockingServlet to handle
            <code>*.erraiBus</code>
            requests ahead of other filters in web.xml will solve the problem:
          </para>
            <informalexample>
               <programlisting language="xml">
&lt;filter&gt;
  &lt;filter-name&gt;ErraiServlet&lt;/filter-name&gt;
  &lt;filter-class&gt;org.jboss.errai.bus.server.servlet.DefaultBlockingServlet&lt;/filter-class&gt;
&lt;/filter&gt;

&lt;filter-mapping&gt;
  &lt;filter-name&gt;ErraiServlet&lt;/filter-name&gt;
  &lt;url-pattern&gt;*.erraiBus&lt;/url-pattern&gt;
&lt;/filter-mapping&gt;
</programlisting>
            </informalexample>
         </section>
         <section id="sid-5931338_Messaging%28ErraiBus%29Configuration-JettyContinuationsServlet">
            <title>JettyContinuationsServlet</title>
            <para>The Jetty implementation leverages Jetty's continuations support, which allows for threadless pausing of port connections. This servlet implementation should work without any special configuration of Jetty.</para>
            <informalexample>
               <programlisting language="xml">
&lt;servlet&gt;
  &lt;servlet-name&gt;ErraiServlet&lt;/servlet-name&gt;
  &lt;servlet-class&gt;org.jboss.errai.bus.server.servlet.JettyContinuationsServlet&lt;/servlet-class&gt;
  &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;
&lt;/servlet&gt;
                                                                                                     
&lt;servlet-mapping&gt;
  &lt;servlet-name&gt;ErraiServlet&lt;/servlet-name&gt;
  &lt;url-pattern&gt;*.erraiBus&lt;/url-pattern&gt;
&lt;/servlet-mapping&gt;
</programlisting>
            </informalexample>
         </section>
         <section id="sid-5931338_Messaging%28ErraiBus%29Configuration-StandardAsyncServlet">
            <title>StandardAsyncServlet</title>
            <para>
            This implementation leverages asynchronous support in Servlet 3.0 to allow for threadless pausing of port connections. Note that
            <code>&lt;async-supported&gt;true&lt;/async-supported&gt;</code>
            has to be added to the servlet definition in
            <code>web.xml</code>
            .
          </para>
            <informalexample>
               <programlisting language="xml">
&lt;servlet&gt;
  &lt;servlet-name&gt;ErraiServlet&lt;/servlet-name&gt;
  &lt;servlet-class&gt;org.jboss.errai.bus.server.servlet.StandardAsyncServlet&lt;/servlet-class&gt;
  &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;
  &lt;async-supported&gt;true&lt;/async-supported&gt;
&lt;/servlet&gt;
                                                                                                     
&lt;servlet-mapping&gt;
  &lt;servlet-name&gt;ErraiServlet&lt;/servlet-name&gt;
  &lt;url-pattern&gt;*.erraiBus&lt;/url-pattern&gt;
&lt;/servlet-mapping&gt;
</programlisting>
            </informalexample>
         </section>
      </section>
   </section>
</chapter>
