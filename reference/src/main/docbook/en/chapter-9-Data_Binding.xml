<?xml version="1.0" encoding="UTF-8"?>
<chapter id="sid-51282340">
   <title>Data Binding</title>
   <para>Errai's data binding module provides the ability to bind model objects to UI fields/widgets. The bound properties of the model and the UI components will automatically be kept in sync for as long as they are bound. So, there is no need to write code for UI updates in response to model changes and no need to register listeners to update the model in response to UI changes.</para>
   <section id="sid-51282340_DataBinding-GettingStarted">
      <title>Getting Started</title>
      <para>
        The data binding module is directly integrated with
        <xref linkend="sid-51806600"/>
        and
        <xref linkend="sid-54493688"/>
        but can also be used as a standalone project in any GWT client application:
      </para>
      <section id="sid-51282340_DataBinding-Compiletimedependency">
         <title>Compile-time dependency</title>
         <para>To use Errai's data binding module, you must include it on the compile-time classpath. If you are using Maven for your build, add this dependency:</para>
         <informalexample>
            <programlisting language="xml">
    &lt;dependency&gt;
      &lt;groupId&gt;org.jboss.errai&lt;/groupId&gt;
      &lt;artifactId&gt;errai-data-binding&lt;/artifactId&gt;
      &lt;version&gt;${errai.version}&lt;/version&gt;
    &lt;/dependency&gt;
</programlisting>
         </informalexample>
         <para>
          If you are not using Maven for dependency management, add
          <code>errai-data-binding-</code>
            <code>version</code>
            <code>.jar</code>
          to your classpath.
        </para>
      </section>
      <section id="sid-51282340_DataBinding-GWTmoduledescriptor">
         <title>GWT module descriptor</title>
         <para>You must also inherit the Errai data binding module by adding the following line to your GWT module descriptor (gwt.xml).</para>
         <example>
            <title>App.gwt.xml</title>
            <programlisting language="xml">
&lt;inherits name="org.jboss.errai.databinding.DataBinding" /&gt;
</programlisting>
         </example>
      </section>
      <section id="sid-51282340_DataBinding-BindableObjects">
         <title>Bindable Objects</title>
         <para>
          Objects that should participate in data bindings have to be marked as
          <code>@Bindable</code>
          and must follow Java bean conventions. All editable properties of these objects are then bindable to UI widgets.
        </para>
         <example>
            <title>Customer.java</title>
            <programlisting language="java">
@Bindable
public class Customer {
  ...
  private String name;

  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }
  ...
}
</programlisting>
         </example>
         <important>
            <para>
            If you cannot or prefer not to annotate your classes with
            <code>@Bindable</code>
            , you can alternatively specify bindable types in your ErraiApp.properties using a whitespace-separated list of fully qualified class names:
            <code>errai.ui.bindableTypes=org.example.Model1 org.example.Model2</code>
            </para>
         </important>
      </section>
      <section id="sid-51282340_DataBinding-InitializingaDataBinder">
         <title>Initializing a DataBinder</title>
         <para>
          An instance of
          <code>DataBinder</code>
          is required to create bindings. It can either be
        </para>
         <para>injected into a client-side bean:</para>
         <informalexample>
            <programlisting language="java">
public class CustomerView {
  @Inject
  private DataBinder&lt;Customer&gt; dataBinder;
}
</programlisting>
         </informalexample>
         <para>or created manually:</para>
         <informalexample>
            <programlisting language="java">
DataBinder&lt;Customer&gt; dataBinder = DataBinder.forType(Customer.class);
</programlisting>
         </informalexample>
         <para>
          In both cases above, the
          <code>DataBinder</code>
          instance is associated with a new instance of the model (e.g. a new
          <code>Customer</code>
          object). A
          <code>DataBinder</code>
          can also be associated with an already existing object:
        </para>
         <informalexample>
            <programlisting language="java">
DataBinder&lt;Customer&gt; dataBinder = DataBinder.forModel(existingCustomerObject);
</programlisting>
         </informalexample>
         <para>In case there is existing state in either the model object or the UI components before the they are bound, initial state synchronization can be carried out to align the model and the corresponding UI fields.</para>
         <para>For using the model object's state to set the initial values in the UI:</para>
         <informalexample>
            <programlisting language="java">
DataBinder&lt;Customer&gt; dataBinder = DataBinder.forModel(existingCustomerObject, InitialState.FROM_MODEL);
</programlisting>
         </informalexample>
         <para>For using the UI values to set the initial state in the model object:</para>
         <informalexample>
            <programlisting language="java">
DataBinder&lt;Customer&gt; dataBinder = DataBinder.forModel(existingCustomerObject, InitialState.FROM_UI);
</programlisting>
         </informalexample>
      </section>
   </section>
   <section id="sid-51282340_DataBinding-CreatingBindings">
      <title>Creating Bindings</title>
      <para>
        Bindings can be created by calling the
        <code>bind</code>
        method on a
        <code>DataBinder</code>
        instance, thereby specifying which widgets should be bound to which properties of the model. It is possible to use property chains for bindings, given that all nested properties are of bindable types. When binding to
        <code>customer.address.streetName</code>
        , for example, both
        <code>customer</code>
        and
        <code>address</code>
        have to be of a type annotated with
        <code>@Bindable</code>
        .
      </para>
      <informalexample>
         <programlisting language="java">
public class CustomerView {
  @Inject
  private DataBinder&lt;Customer&gt; dataBinder;

  private Customer customer;
  private TextBox nameTextBox = new TextBox();
  // more UI widgets...

  @PostConstruct
  private void init() {
    customer = dataBinder
        .bind(nameTextBox, "name")
        .bind(idLabel, "id")
        .getModel();
  }
}
</programlisting>
      </informalexample>
      <para>
        After the call to
        <code>dataBinder.bind()</code>
        in the example above, the customer object's name property and the
        <code>nameTextBox</code>
        are kept in sync until either the
        <code>dataBinder.unbind()</code>
        method is called or the
        <code>CustomerView</code>
        bean is destroyed.
      </para>
      <para>
        That means that a call to
        <code>customer.setName()</code>
        will automatically update the value of the TextBox and any change to the TextBox's value in the browser will update the customer object's name property. So,
        <code>customer.getName()</code>
        will always reflect the currently displayed value of the
        <code>TextBox</code>
        .
      </para>
      <note>
         <para>It's important to retrieve the model instance using dataBinder.getModel() before making changes to it as the data binder will provide a proxy to the model to ensure that changes will update the corresponding UI components.</para>
      </note>
      <tip>
         <para>
          Errai also provides a
          <link linkend="sid-51282340_DataBinding-DeclarativeBinding">declarative binding API</link>
          that can be used to create bindings automatically based on matching field and model property names.
        </para>
      </tip>
   </section>
   <section id="sid-51282340_DataBinding-SpecifyingConverters">
      <title>Specifying Converters</title>
      <para>Errai has built-in conversion support for all Number types as well as Boolean and Date to java.lang.String and vice versa. However, in some cases it will be necessary to provide custom converters (e.g. if a custom date format is desired). This can be done on two levels.</para>
      <section id="sid-51282340_DataBinding-Registeringaglobaldefaultconverter">
         <title>Registering a global default converter</title>
         <informalexample>
            <programlisting language="java">
@DefaultConverter
public class MyCustomDateConverter implements Converter&lt;Date, String&gt; {

  private static final String DATE_FORMAT = "YY_DD_MM";

  @Override
  public Date toModelValue(String widgetValue) {
    return DateTimeFormat.getFormat(DATE_FORMAT).parse(widgetValue);
  }

  @Override
  public String toWidgetValue(Date modelValue) {
    return DateTimeFormat.getFormat(DATE_FORMAT).format((Date) modelValue);
  }
}
</programlisting>
         </informalexample>
         <para>
          All converters annotated with
          <code>@DefaultConverter</code>
          will be registered as global defaults calling
          <code>Convert.registerDefaultConverter()</code>
          . Note that the
          <code>Converter</code>
          interface specifies two type parameters. The first one represents the type of the model field, the second one the type held by the widget (e.g.
          <code>String</code>
          for widgets implementing
          <code>HasValue&lt;String&gt;</code>
          ). These default converters will be used for all bindings with matching model and widget types.
        </para>
      </section>
      <section id="sid-51282340_DataBinding-Providingabindingspecificconverter">
         <title>Providing a binding-specific converter</title>
         <para>
          Alternatively, converter instances can be passed to the
          <code>dataBinder.bind()</code>
          calls.
        </para>
         <informalexample>
            <programlisting language="java">
dataBinder.bind(textBox, "name", customConverter);
</programlisting>
         </informalexample>
         <para>Converters specified on the binding level take precedence over global default converters with matching types.</para>
      </section>
   </section>
   <section id="sid-51282340_DataBinding-PropertyChangeHandlers">
      <title>Property Change Handlers</title>
      <para>
        In some cases keeping the model and the UI in sync is not enough. Errai's
        <code>DataBinder</code>
        allows for the registration of
        <code>PropertyChangeHandlers</code>
        for specific properties, property expressions or all properties of a bound model. A property expression can be a property chain such as customer.address.street. It can end in a wildcard to indicate that changes of any property of the corresponding bean should be observed (e.g
        <code>"customer.address.*"</code>
        ). A double wildcard can be used at the end of a property expression to register a cascading change handler for any nested property (e.g
        <code>"customer.**"</code>
        ).
      </para>
      <para>
        This provides a uniform notification mechanism for model and UI value changes.
        <code>PropertyChangeHandlers</code>
        can be used to carry out any additional logic that might be necessary after a model or UI value has changed.
      </para>
      <informalexample>
         <programlisting language="java">
dataBinder.addPropertyChangeHandler(new PropertyChangeHandler() {
  @Override
  public void onPropertyChange(PropertyChangeEvent event) {
    Window.alert(event.getPropertyName() + " changed to:" + event.getNewValue());
  }
});
</programlisting>
      </informalexample>
      <informalexample>
         <programlisting language="java">
dataBinder.addPropertyChangeHandler("name", new PropertyChangeHandler() {
  @Override
  public void onPropertyChange(PropertyChangeEvent event) {
    Window.alert("name changed to:" + event.getNewValue());
  }
});
</programlisting>
      </informalexample>
   </section>
   <section id="sid-51282340_DataBinding-DeclarativeBinding">
      <title>Declarative Binding</title>
      <para>
        Programmatic binding as described above (see
        <link linkend="sid-51282340_DataBinding-CreatingBindings">Creating Bindings</link>
        ) can be tedious when working with UI components that contain a large number of input fields. Errai provides an annotation-driven binding API that can be used to create bindings automatically which cuts a lot of boilerplate code. The declarative API will work in any
        <link linkend="sid-5931402">Errai IOC</link>
        managed bean (including
        <xref linkend="sid-51806600"/>
        templates). Simply inject a data binder or model object and declare the bindings using
        <code>@Bound</code>
        .
      </para>
      <para>
        Here is a simple example using an injected model object provided by the
        <code>@Model</code>
        annotation (field injection is used here, but constructor and method injection are supported as well):
      </para>
      <informalexample>
         <programlisting language="java">
@Dependent
public class CustomerView {
  @Inject @Model
  private Customer customer;

  @Inject @Bound
  private TextBox name;

  @Bound
  private Label id = new Label();

  ....
}
</programlisting>
      </informalexample>
      <para>
        Here is the same example injecting a
        <code>DataBinder</code>
        instead of the model object. This is useful when more control is needed (e.g. the ability to register property change handlers). The
        <code>@AutoBound</code>
        annotation specifies that this
        <code>DataBinder</code>
        should be used to bind the model to all enclosing widgets annotated with
        <code>@Bound</code>
        . This example uses field injection again but constructor and method injection are supported as well.
      </para>
      <informalexample>
         <programlisting language="java">
@Dependent
public class CustomerView {
  @Inject @AutoBound
  private DataBinder&lt;Customer&gt; customerBinder;

  @Inject @Bound
  private TextBox name;

  @Bound
  private Label id = new Label();

  ...
}
</programlisting>
      </informalexample>
      <para>
        In both examples above an instance of the
        <code>Customer</code>
        model is automatically bound to the corresponding UI widgets based on matching field names. The model object and the UI fields will automatically be kept in sync. The widgets are inferred from all enclosing fields and methods annotated with
        <code>@Bound</code>
        of the class that defines the
        <code>@AutoBound DataBinder</code>
        or
        <code>@Model</code>
        and all its super classes.
      </para>
      <section id="sid-51282340_DataBinding-Default%2CSimple%2CandChainedPropertyBindings">
         <title>Default, Simple, and Chained Property Bindings</title>
         <para>
          By default, bindings are determined by matching field names to property names on the model object. In the examples above, the field
          <code>name</code>
          was automatically bound to the JavaBeans property
          <code>name</code>
          of the model (
          <code>user</code>
          object). If the field name does not match the model property name, you can use the
          <code>property</code>
          attribute of the
          <code>@Bound</code>
          annotation to specify the name of the property. The property can be a simple name (for example, "name") or a property chain (for example,
          <code>user.address.streetName</code>
          ). When binding to a property chain, all properties but the last in the chain must refer to @Bindable values.
        </para>
         <para>The following example illustrates all three scenarios:</para>
         <informalexample>
            <programlisting language="java">
@Bindable
public class Address {
  private String line1;
  private String line2;
  private String city;
  private String stateProv;
  private String country;

  // getters and setters
}

@Bindable
public class User {
  private String name;
  private String password;
  private Date dob;
  private Address address;
  private List&lt;Role&gt; roles;

  // getters and setters
}

@Templated
public class UserWidget {
  @Inject @AutoBound DataBinder&lt;User&gt; user;
  @Inject @Bound TextBox name;
  @Inject @Bound("dob") DatePicker dateOfBirth;
  @Inject @Bound("address.city") TextBox city;
}
</programlisting>
         </informalexample>
         <para>
          In
          <code>UserWidget</code>
          above, the
          <code>name</code>
          text box is bound to
          <code>user.name</code>
          using the default name matching; the
          <code>dateOfBirth</code>
          date picker is bound to
          <code>user.dob</code>
          using a simple property name mapping; finally, the
          <code>city</code>
          text box is bound to
          <code>user.address.city</code>
          using a property chain. Note that the
          <code>Address</code>
          class is required to be
          <code>@Bindable</code>
          in this case.
        </para>
      </section>
      <section id="sid-51282340_DataBinding-DataConverters">
         <title>Data Converters</title>
         <para>
          The
          <code>@Bound</code>
          annotation further allows to specify a converter to use for the binding (see
          <link linkend="sid-51282340_DataBinding-SpecifyingConverters">Specifying Converters</link>
          for details). This is how a binding specific converter can be specified on a data field:
        </para>
         <informalexample>
            <programlisting language="java">
@Inject
@Bound(converter=MyDateConverter.class)
@DataField
private TextBox date;
</programlisting>
         </informalexample>
      </section>
      <section id="sid-51282340_DataBinding-Replacingamodelobject">
         <title>Replacing a model object</title>
         <para>The injected model objects in the examples above are always proxies to the actual model since method invocations on these objects need to trigger additional logic for updating the UI. Special care needs to be taken in case a model object should be replaced.</para>
         <para>
          When working with an
          <code>@AutoBound DataBinder</code>
          , simply calling
          <code>setModel()</code>
          on the
          <code>DataBinder</code>
          will be enough to replace the underlying model instance. However, when working with
          <code>@Model</code>
          the instance cannot be replaced directly. Errai provides a special method level annotation
          <code>@ModelSetter</code>
          that will allow replacing the model instance. Here's an example:
        </para>
         <informalexample>
            <programlisting language="java">
@Dependent
public class CustomerView {
  @Inject @Model
  private Customer customer;

  @Inject @Bound
  private TextBox name;

  @Bound
  private Label id = new Label();

  @ModelSetter
  public void setModel(Customer customer) {
    this.customer = customer;
  }
}
</programlisting>
         </informalexample>
         <para>
          The
          <code>@ModelSetter</code>
          method is required to have a single parameter. The parameter type needs to correspond to the type of the managed model.
        </para>
      </section>
   </section>
   <section id="sid-51282340_DataBinding-Beanvalidation">
      <title>Bean validation</title>
      <para>
        Java bean validation (JSR 303) provides a declarative programming model for validating entities. More details and examples can be found
        <ulink url="http://docs.jboss.org/hibernate/validator/4.3/reference/en-US/html_single/">here</ulink>
        . Errai provides a bean validation module that makes
        <code>Validator</code>
        instances injectable and work well with Errai's data binding module. The following line needs to be added to the GWT module descriptor to inherit Errai's bean validation module:
      </para>
      <example>
         <title>App.gwt.xml</title>
         <programlisting language="xml">
&lt;inherits name="org.jboss.errai.validation.Validation" /&gt;

&lt;inherits name="org.hibernate.validator.HibernateValidator" /&gt;
</programlisting>
      </example>
      <para>To use Errai's bean validation module, you must add the module, the javax.validation API and an implementation such as hibernate validator to your classpath. If you are using Maven for your build, add these dependencies:</para>
      <informalexample>
         <programlisting language="xml">
    &lt;dependency&gt;
      &lt;groupId&gt;org.jboss.errai&lt;/groupId&gt;
      &lt;artifactId&gt;errai-validation&lt;/artifactId&gt;
      &lt;version&gt;${errai.version}&lt;/version&gt;
    &lt;/dependency&gt;

    &lt;dependency&gt;
      &lt;groupId&gt;javax.validation&lt;/groupId&gt;
      &lt;artifactId&gt;validation-api&lt;/artifactId&gt;
      &lt;scope&gt;provided&lt;/scope&gt;
    &lt;/dependency&gt;

    &lt;dependency&gt;
      &lt;groupId&gt;javax.validation&lt;/groupId&gt;
      &lt;artifactId&gt;validation-api&lt;/artifactId&gt;
      &lt;classifier&gt;sources&lt;/classifier&gt;
      &lt;scope&gt;provided&lt;/scope&gt;
    &lt;/dependency&gt;

    &lt;dependency&gt;
      &lt;groupId&gt;org.hibernate&lt;/groupId&gt;
      &lt;artifactId&gt;hibernate-validator&lt;/artifactId&gt;
      &lt;version&gt;4.2.0.Final&lt;/version&gt;
      &lt;scope&gt;provided&lt;/scope&gt;
    &lt;/dependency&gt;

    &lt;dependency&gt;
      &lt;groupId&gt;org.hibernate&lt;/groupId&gt;
      &lt;artifactId&gt;hibernate-validator&lt;/artifactId&gt;
      &lt;version&gt;4.2.0.Final&lt;/version&gt;
      &lt;scope&gt;provided&lt;/scope&gt;
      &lt;classifier&gt;sources&lt;/classifier&gt;
    &lt;/dependency&gt;
</programlisting>
      </informalexample>
      <para>
        Now it is as simple as injecting a
        <code>Validator</code>
        instance into an
        <link linkend="sid-5931402">Errai IOC</link>
        managed bean and calling the
        <code>validate</code>
        method.
      </para>
      <informalexample>
         <programlisting language="java">
@Inject
private Validator validator;
</programlisting>
      </informalexample>
      <informalexample>
         <programlisting language="java">
Set&lt;ConstraintViolation&lt;Customer&gt;&gt; violations  = validator.validate(customer);
// display violations
</programlisting>
      </informalexample>
      <section id="sid-51282340_DataBinding-ExcludingClassesfromValidation">
         <title>Excluding Classes from Validation</title>
         <para>By default, Errai scans the entire classpath for classes with constraints. But sometimes it is necessary or desirable to exclude some shared classes from being validated on the client side. This can be done by adding a list of classes and package masks to the ErraiApp.properties file like so:</para>
         <informalexample>
            <programlisting language="ini"># The following blacklists the class some.fully.qualified.ClassName and all classes in some.package.mask (and subpackages thereof).
errai.validation.blacklist = some.fully.qualified.ClassName \
                             some.package.mask.*</programlisting>
         </informalexample>
      </section>
   </section>
</chapter>
